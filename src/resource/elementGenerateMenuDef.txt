
# パーツ定義です。

KIND: コメント
TYPE: NONE
HEIGHT: 35
DISPNAME: コメント
DESCRIPTION: コメントです。
コメント;コメント :comment
-->RPN
---->DEFINE

KIND: 処理
TYPE: POS_LIST
DISPNAME: 点の集まり/円周上に並んだ点
DESCRIPTION: 円周上に点を並べて配置します。
FUNCTION: series_on_circle
---->DEFINE

KIND: 処理
TYPE: POS_LIST
DISPNAME: 点の集まり/円周上に並んだ点(周回)
DESCRIPTION: 円周上に点を並べて配置します(周回)。
FUNCTION: series_on_circle2
---->DEFINE


KIND: 処理
TYPE: POS_LIST
DISPNAME: 点の集まり/点の座標を加算
DESCRIPTION: 円周上の点の座標を加算します。
FUNCTION: add_2_point_series
---->DEFINE

KIND: 処理
TYPE: POS_LIST
DISPNAME: 点の集まり/長さと角度を元に座標を生成
DESCRIPTION: 長さと角度を元に座標をひとつ生成します。
FUNCTION: single_position
---->DEFINE

KIND: 処理
TYPE: POS_LIST
DISPNAME: 点の集まり/並び順をローテート
DESCRIPTION: 座標の系列の並び順をローテートします。
FUNCTION: rotate_point_list
---->DEFINE

KIND: 処理
TYPE: POS_LIST
DISPNAME: 点の集まり/点の並びを閉じる
DESCRIPTION: 座標の系列を操作し、最初の点=最後の点にします。
FUNCTION: close_pos_list
---->DEFINE

KIND: 処理
TYPE: POS_LIST
DISPNAME: 点の集まり/点の集まりを辿る
DESCRIPTION: 複数の座標の系列を辿ります。
FUNCTION: pos_to_walk
---->DEFINE


KIND: 処理
TYPE: POS_LIST
DISPNAME: 点の集まり/点の集まりをNスキップで辿る
DESCRIPTION: 点の集まりをスキップしながら辿ります。
FUNCTION: pos_to_pos_skip
---->DEFINE


KIND: 処理
TYPE: LINE_LIST
DISPNAME: 線の集まり/並び順をローテート
DESCRIPTION: 座標の系列の並び順をローテートします。
FUNCTION: rotate_line_list
---->DEFINE

KIND: 処理
TYPE: LINE_LIST
DISPNAME: 線の集まり/点を線で結ぶ
DESCRIPTION: 点を線で結びます。
FUNCTION: line_from_1_series
---->DEFINE


KIND: 処理
TYPE: LINE_LIST
DISPNAME: 線の集まり/点を線で結ぶ(閉じる)
DESCRIPTION: 点を線で結び、閉じます。
FUNCTION: line_from_1_series_close
---->DEFINE


KIND: 処理
TYPE: LINE_LIST
DISPNAME: 線の集まり/点を線で結ぶ(オーバーラップして閉じる)
DESCRIPTION: 点を線で結び、閉じます(オーバーラップします)。
FUNCTION: line_from_1_series_close_ow
---->DEFINE

KIND: 処理
TYPE: LINE_LIST
DISPNAME: 線の集まり/2系列の点を線で結ぶ
DESCRIPTION: 2系列の点を線で結びます。
FUNCTION: line_from_2_series
---->DEFINE

KIND: 処理
TYPE: LINE_LIST
DISPNAME: 変換/回転変換を生成
DESCRIPTION: 回転します。
FUNCTION: create_rot_transform
---->DEFINE

KIND: 処理
TYPE: LINE_LIST
DISPNAME: 変換/移動変換を生成
DESCRIPTION: 移動します。
FUNCTION: create_move_transform
---->DEFINE

KIND: 処理
TYPE: LINE_LIST
DISPNAME: 変換/拡大縮小変換を生成
DESCRIPTION: 拡大縮小します。
FUNCTION: create_scale_transform
---->DEFINE

KIND: 処理
TYPE: LINE_LIST
DISPNAME: 変換/傾ける変換を生成
DESCRIPTION: 傾けます。
FUNCTION: create_skew_transform
---->DEFINE

KIND: 処理
TYPE: LINE_LIST
DISPNAME: 変換/変換を結合
DESCRIPTION: 2つの変換を結合します
FUNCTION: combine_transforms
---->DEFINE

KIND: 処理
TYPE: LINE_LIST
DISPNAME: 変換/点の集まりを変換
DESCRIPTION: 点の集まりに対して変換を実行します
FUNCTION: do_transform_pos
---->DEFINE

KIND: 処理
TYPE: COLOR
DISPNAME: 色/HSVカラー
DESCRIPTION: HSV値から色を生成します。
FUNCTION: hsv_to_color
---->DEFINE

KIND: 処理
TYPE: COLOR
DISPNAME: 色/RGBカラー
DESCRIPTION: RGB値から色を生成します。
FUNCTION: rgb_to_color
---->DEFINE

KIND: 処理
TYPE: COLOR
DISPNAME: 色/色指定文字列からカラー
DESCRIPTION: #000000から#FFFFFFの文字列により色情報を生成します。
FUNCTION: html_color
---->DEFINE

KIND: 表示
TYPE: NONE
DISPNAME: 色/色を設定(PNG)
DESCRIPTION: 色を設定します(PNG)。
FUNCTION: set_color_png
---->DEFINE

KIND: 表示
TYPE: NONE
DISPNAME: 色/色を設定(SVG)
DESCRIPTION: 色を設定します(SVG)。
FUNCTION: set_color_svg
---->DEFINE

# TODO
#
# KIND: 処理
# TYPE: LINE_LIST
# DISPNAME: 変換/線の集まりを変換
# DESCRIPTION: 線の集まりに対して変換を行います
# FUNCTION: do_transform_lines
# ---->DEFINE

KIND: 定数
TYPE: INTEGER
HEIGHT: 35
DISPNAME: 定数/整数 0
DESCRIPTION: 定数値です。
0;定数 :as-numeric
-->RPN
---->DEFINE

KIND: 定数
TYPE: INTEGER
HEIGHT: 35
DISPNAME: 定数/整数 1
DESCRIPTION: 定数値です。
1;定数 :as-numeric
-->RPN
---->DEFINE

KIND: 定数
TYPE: INTEGER
HEIGHT: 35
DISPNAME: 定数/整数 2
DESCRIPTION: 定数値です。
2;定数 :as-numeric
-->RPN
---->DEFINE

KIND: 定数
TYPE: FLOAT
HEIGHT: 35
DISPNAME: 定数/浮動小数点 1
DESCRIPTION: 定数値です。
1;定数 :as-numeric
-->RPN
---->DEFINE

KIND: 定数
TYPE: FLOAT
WIDTH: 40
HEIGHT: 35
DISPNAME: 定数/浮動小数点 π
DESCRIPTION: 定数πです。
:pi
π :as-display-string
-->RPN
---->DEFINE

KIND: 定数
TYPE: FLOAT
WIDTH: 40
HEIGHT: 35
DISPNAME: 定数/浮動小数点 2π
DESCRIPTION: 定数2πです。
:pi 2 :as-numeric *
2π :as-display-string
-->RPN
---->DEFINE

KIND: 定数
TYPE: FLOAT
WIDTH: 40
HEIGHT: 35
DISPNAME: 定数/浮動小数点 e (2.718..)
DESCRIPTION: 定数e です。
:e
e :as-display-string
-->RPN
---->DEFINE

KIND: 定数
TYPE: FLOAT
HEIGHT: 35
DISPNAME: 定数/浮動小数点 1
DESCRIPTION: 定数値です。
1;定数 :as-numeric
-->RPN
---->DEFINE

KIND: 定数
TYPE: STRING
HEIGHT: 35
DISPNAME: 定数/文字列
DESCRIPTION: 文字列の定数値です。
文字列の定数;定数
-->RPN
---->DEFINE

KIND: 定数
TYPE: BOOLEAN
HEIGHT: 35
DISPNAME: 定数/ブール値 true
DESCRIPTION: ブール値の定数値です。
true;定数 :as-boolean
-->RPN
---->DEFINE


KIND: 定数
TYPE: BOOLEAN
HEIGHT: 35
DISPNAME: 定数/ブール値 false
DESCRIPTION: ブール値の定数値です。
true;定数 :as-boolean
-->RPN
---->DEFINE

KIND: 変数を参照
TYPE: NONE
HEIGHT: 35
DISPNAME: 変数/既存の変数を参照/{exist-variable}
DESCRIPTION: 変数を参照します。
'{exist-variable} :recall-variable
-->RPN
---->DEFINE

KIND: 変数を設定
TYPE: NONE
HEIGHT: 35
DISPNAME: 変数/既存の変数を書き換え/{exist-variable}
DESCRIPTION: 変数を設定します。
<value:ANY> '{exist-variable} :set-variable
-->RPN
---->DEFINE

KIND: 変数を設定
TYPE: NONE
HEIGHT: 35
DISPNAME: 変数/新しい変数に設定 {new-variable}
DESCRIPTION: 新しい変数
<value:ANY> '{new-variable};変数名 :set-variable
-->RPN
---->DEFINE

KIND: 入力
TYPE: INTEGER
DISPNAME: 入力/整数値
DESCRIPTION: 整数値を入力します。
:input:integer
-->RPN
---->DEFINE


KIND: 演算子
TYPE: SCALAR
DISPNAME: 算術演算子/加算(足す)
WIDTH: 50
HEIGHT: 50
DESCRIPTION: 2つの数値を足します。
<input1:SCALAR>
<input2:SCALAR>
+
-->RPN
---->DEFINE


KIND: 演算子
TYPE: SCALAR
DISPNAME: 算術演算子/加算(5入力・実験的)
WIDTH: 50
HEIGHT: 50
DESCRIPTION: 入力された数値を足します。
<input1:SCALAR>
<input2:SCALAR>
+
<input3:SCALAR>
+
<input4:SCALAR>
+
<input5:SCALAR>
+
-->RPN
---->DEFINE


KIND: 演算子
TYPE: SCALAR
DISPNAME: 算術演算子/減算(引く)
WIDTH: 50
HEIGHT: 50
DESCRIPTION: 数値1から数値2を引きます。
<input1:SCALAR>
<input2:SCALAR>
-
-->RPN
---->DEFINE

KIND: 演算子
TYPE: SCALAR
DISPNAME: 算術演算子/乗算(かける)
WIDTH: 50
HEIGHT: 50
DESCRIPTION: 2つの数値を乗算します。
<input1:SCALAR>
<input2:SCALAR>
*
-->RPN
---->DEFINE

KIND: 演算子
TYPE: SCALAR
DISPNAME: 算術演算子/除算(割る)
WIDTH: 50
HEIGHT: 50
DESCRIPTION: 数値1を数値2で割ります。
<input1:SCALAR>
<input2:SCALAR>
/
-->RPN
---->DEFINE

KIND: 演算子
TYPE: SCALAR
DISPNAME: 算術演算子/剰余(あまり)
WIDTH: 50
HEIGHT: 50
DESCRIPTION: 数値1を数値2で割った余りです。
<input1:SCALAR>
<input2:SCALAR>
%
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 比較演算子/＞
WIDTH: 50
HEIGHT: 50
DESCRIPTION: aがbより大きい場合、真になります。
<input1:SCALAR>
<input2:SCALAR>
>
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 比較演算子/≧
WIDTH: 50
HEIGHT: 50
DESCRIPTION: aがb以上の場合、真になります。
<input1:SCALAR>
<input2:SCALAR>
>=
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 比較演算子/＝
WIDTH: 50
HEIGHT: 50
DESCRIPTION: aとbが等しい場合、真になります。
<input1:SCALAR>
<input2:SCALAR>
==
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 比較演算子/≠
WIDTH: 50
HEIGHT: 50
DESCRIPTION: aとbが異なる場合、真になります。
<input1:SCALAR>
<input2:SCALAR>
!=
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 比較演算子/≦
WIDTH: 50
HEIGHT: 50
DESCRIPTION: aがb以下の場合、真になります。
<input1:SCALAR>
<input2:SCALAR>
<=
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 比較演算子/＜
WIDTH: 50
HEIGHT: 50
DESCRIPTION: aがbより小さい場合、真になります。
<input1:SCALAR>
<input2:SCALAR>
<
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 論理演算子/AND(かつ)
WIDTH: 50
HEIGHT: 50
DESCRIPTION: aとbの両方が真の場合、真になります。
<input1:BOOLEAN>
<input2:BOOLEAN>
:and
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 論理演算子/OR(または)
WIDTH: 50
HEIGHT: 50
DESCRIPTION: aとbのどちらかが真の場合、真になります。
<input1:BOOLEAN>
<input2:BOOLEAN>
:or
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 論理演算子/XOR(排他的論理和)
WIDTH: 50
HEIGHT: 50
DESCRIPTION: aとbのどちらか片方だけが真の場合、真になります。
<input1:BOOLEAN>
<input2:BOOLEAN>
:xor
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 論理演算子/NOT(否定)
WIDTH: 50
HEIGHT: 50
DESCRIPTION: 入力が偽の場合、真になります。
<input1:BOOLEAN>
:not
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 論理演算子/NAND
WIDTH: 50
HEIGHT: 50
DESCRIPTION: 論理演算子NANDです。
<input1:BOOLEAN>
<input2:BOOLEAN>
:nand
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 論理演算子/NOR
WIDTH: 50
HEIGHT: 50
DESCRIPTION: 論理演算子NORです。
<input1:BOOLEAN>
<input2:BOOLEAN>
:nor
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 論理演算子/XNOR
WIDTH: 50
HEIGHT: 50
DESCRIPTION: 論理演算子XNORです。
<input1:BOOLEAN>
<input2:BOOLEAN>
:xnor
-->RPN
---->DEFINE

KIND: 演算子
TYPE: SCALAR
DISPNAME: 条件演算子/数値のIF式
WIDTH: 50
HEIGHT: 50
DESCRIPTION: IF式です。
<cond:BOOLEAN>
<if-true:SCALAR>
<if-false:SCALAR>
:if
-->RPN
---->DEFINE

KIND: 演算子
TYPE: STRING
DISPNAME: 条件演算子/文字列のIF式
WIDTH: 50
HEIGHT: 50
DESCRIPTION: IF式です。
<cond:BOOLEAN>
<if-true:STRING>
<if-false:STRING>
:if
-->RPN
---->DEFINE

KIND: 演算子
TYPE: BOOLEAN
DISPNAME: 条件演算子/ブール値のIF式
WIDTH: 50
HEIGHT: 50
DESCRIPTION: IF式です。
<cond:BOOLEAN>
<if-true:BOOLEAN>
<if-false:BOOLEAN>
:if
-->RPN
---->DEFINE

KIND: 表示
TYPE: NONE
DISPNAME: 出力/表示
DESCRIPTION: コンソールウィンドウに表示します
<input:ANY>
:print
-->RPN
---->DEFINE

KIND: 表示
TYPE: NONE
DISPNAME: 出力/線の集まりを描画
DESCRIPTION: 線分のリストを描画します。
FUNCTION: line_to_draw
---->DEFINE

KIND: 表示
TYPE: NONE
DISPNAME: 出力/点の集まりをつないで描画
DESCRIPTION: 点の集まりを線でつないで描画します。
FUNCTION: draw_polyline
---->DEFINE

KIND: 表示
TYPE: NONE
DISPNAME: 出力/点の集まりをつないで描画（閉じる）
DESCRIPTION: 点の集まりを線でつないで描画します。
FUNCTION: draw_polyline_close
---->DEFINE

KIND: 表示
TYPE: NONE
DISPNAME: 出力/点の集まりをつないで描画（閉じてオーバーラップ）
DESCRIPTION: 点の集まりを線でつないで描画します。
FUNCTION: draw_polyline_close_ow
---->DEFINE

KIND: 表示
TYPE: NONE
DISPNAME: 出力/線の太さを指定(SVG)
DESCRIPTION: 線分の太さを指定します。
FUNCTION: set_stroke_width_svg
---->DEFINE

KIND: 表示
TYPE: NONE
DISPNAME: 出力/線の太さを指定(PNG)
DESCRIPTION: 線分の太さを指定します。
FUNCTION: set_stroke_width_png
---->DEFINE


KIND: 制御
TYPE: NONE
CONTROL_TYPE: REPEAT
DISPNAME: 制御/繰り返し(添字なし固定回数ループ)
WIDTH: 600
HEIGHT: 300
DESCRIPTION: 繰り返します。
1 10;繰り返す回数 :loop
-->RPN
---->DEFINE


KIND: 制御
TYPE: NONE
CONTROL_TYPE: REPEAT
DISPNAME: 制御/繰り返し(添字あり固定回数ループ)
WIDTH: 600
HEIGHT: 300
DESCRIPTION: 繰り返します。
1;開始 10;終了 :loop
-->RPN
---->DEFINE


KIND: 制御
TYPE: NONE
CONTROL_TYPE: IF
DISPNAME: 制御/条件実行(IF文)
WIDTH: 400
HEIGHT: 300
DESCRIPTION: 与えられた条件が真の場合実行します。
:if
-->RPN
---->DEFINE

KIND: 制御
TYPE: NONE
CONTROL_TYPE: FOREACH
DISPNAME: 制御/列挙
WIDTH: 800
HEIGHT: 400
DESCRIPTION: 繰り返します。
1;開始 100;終了 :loop
-->RPN
---->DEFINE
